extern crate sdl2;

mod bytes;
mod registers;
mod instructions;
mod cpu;
mod mmu;
mod device;
mod display;

pub static GBM_BOOT_ROM: [u8;256] = [
    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
];

fn main() {
    let mut registers = registers::new();
    let instructions = instructions::new();

    let mut cartridge = device::cartridge::load_from_file(
        String::from("/Users/anders/Projects/gb_test_roms/sheepitup.gb")
    );
    let mut restart_and_interrupt = device::restart_and_interrupt::new(GBM_BOOT_ROM);
    let mut vram = device::vram::new();
    let mut hardware_io = device::hardware_io::new();
    let mut interrupt_enabled = device::interrupt::new_enabled();
    let mut zero_page = device::zero_page::ZeroPage{storage: [0;127]};

    let mut mmu = mmu::MMU {
        restart_and_interrupt: &mut restart_and_interrupt,
        cartridge: &mut cartridge,
        video_ram: &mut vram,
        cartridge_ram: &mut device::not_implemented::NotImplemented{},
        internal_ram_bank_0: &mut device::not_implemented::NotImplemented{},
        internal_ram_bank_1: &mut device::not_implemented::NotImplemented{},
        echo_ram: &mut device::not_implemented::NotImplemented{},
        object_attribute_memory: &mut device::not_implemented::NotImplemented{},
        unusable_memory: &mut device::not_implemented::NotImplemented{},
        hardware_io: &mut hardware_io,
        zero_page: &mut zero_page,
        interrupt_enable: &mut interrupt_enabled,
    };

    let mut cpu = cpu::new(&instructions);
    let mut gpu = device::gpu::new();

    loop {
        let m = &mut mmu;
        let r = &mut registers;

        let cycles = cpu.tick(r, m);

        if m.hardware_io.get_lcd_control_flag(device::hardware_io::LCDControlFlag::LCDDisplayEnable) {
            gpu.tick(m, cycles);
        }

        if r.get_interrupts_enabled() {
            let requested = m.hardware_io.get_requested_interrupts();
            let enabled = m.interrupt_enable.get_enabled_interrupts();
            let _interrupts = device::interrupt::flags(enabled, requested);
        }
    }
}
